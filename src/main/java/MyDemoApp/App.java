/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package MyDemoApp;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

import org.apache.logging.log4j.Logger;
import org.apache.logging.log4j.LogManager;

import static spark.Spark.get;
import static spark.Spark.post;
import static spark.Spark.port;
import spark.ModelAndView;
import spark.template.mustache.MustacheTemplateEngine;


public class App {
    public static void main(String[] args) {
      Logger logger = LogManager.getLogger(App.class);

      int port = Integer.parseInt(System.getenv("PORT"));
      port(port);
      logger.error("Current port number:" + port); // for local

      get("/", (req, res) -> "Hello, World");
      get("/compute",
            (rq, rs) -> {
              Map<String, String> map = new HashMap<String, String>();
              map.put("result", "is not computed yet!");
              return new ModelAndView(map, "compute.mustache");
            },
            new MustacheTemplateEngine()
      );

      post("/compute", (req, res) -> {
  
            String input1 = req.queryParams("input1");
            java.util.Scanner sc1 = new java.util.Scanner(input1);
            sc1.useDelimiter("[;\r\n]+");
            java.util.ArrayList<Integer> fromArray = new java.util.ArrayList<>();
            while (sc1.hasNext())
            {
              int value = Integer.parseInt(sc1.next().replaceAll("\\s",""));
              fromArray.add(value);
            }
            sc1.close();
            String input2 = req.queryParams("input2");
            sc1 = new java.util.Scanner(input2);
            sc1.useDelimiter("[;\r\n]+");
            java.util.ArrayList<Integer> toArray = new java.util.ArrayList<>();
            while (sc1.hasNext())
            {
              int value = Integer.parseInt(sc1.next().replaceAll("\\s",""));
              toArray.add(value);
            }

            sc1.close();
  
  
            String input3 = req.queryParams("input3").replaceAll("\\s","");
            int startindex = Integer.parseInt(input3);
            String input4 = req.queryParams("input4").replaceAll("\\s","");
            int finishindex = Integer.parseInt(input4);

             Map<String, String> map = new HashMap<String, String>();
            try{
            ArrayList<Integer> result = App.copyArray(fromArray,toArray,startindex,finishindex);
            map.put("result", " is " + result.toString());
            }
            catch(RuntimeException e){
              String result= "could not be computed because of invalid inputs.Please try again with valid inputs."; 
              map.put("result", result.toString());
            }
            
            return new ModelAndView(map, "compute.mustache");
          }, new MustacheTemplateEngine()
      );
  
  
    }


    public static ArrayList<Integer> copyArray(ArrayList<Integer> fromArray, ArrayList<Integer> toArray, int startindex, int finishindex){
        if(fromArray == null || toArray == null)  throw new RuntimeException("arrays cannot be null");
        if(startindex < 0) throw new RuntimeException("index cannot be less than zero");
        if(startindex >= fromArray.size() || startindex >= toArray.size() ) throw new RuntimeException("start index cannot be greater than the length of the arrays");
        if(finishindex >= fromArray.size() || finishindex >= toArray.size() ) throw new RuntimeException("finish index git cannot be greater than the length of the  arrays");
        

        for(int i = startindex; i<=finishindex; i++){
            toArray.set(i, fromArray.get(i));
        }

        return toArray;

    }
}
